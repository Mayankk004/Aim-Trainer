import pygame
import math
import random
import time
pygame.init()       #initialise pygame, fonts, etc.
width, height=800,600
bar_height=50
win=pygame.display.set_mode((width,height))   #initialise pygame window and display it
pygame.display.set_caption("AIM TRAINER")   

Target_increase_time=400             #Increase to increase difficulty level
Target_event=pygame.USEREVENT
Target_Padding=30
bg_colour=(0,25,40)
lives=3
label_font=pygame.font.SysFont("times new roman",24)
class Target:
    max_size=30
    growth_rate=0.2
    colour="red"
    colour2="white"

    def __init__(self,x,y):         
        self.x=x
        self.y=y
        self.size=0
        self.grow=True              #Flag to check grow/make small condition
    
    def update(self):
        if self.size + self.growth_rate>=self.max_size:         #Reached maximum size
            self.grow=False
        if self.grow:                                           #Size hasn't reached max_size(increase)
            self.size+=self.growth_rate
        else:                                                   #Size has reached max_size(decrease)
            self.size-=self.growth_rate

    def draw(self,win):                                         #Drawing target on window
        pygame.draw.circle(win,self.colour,(self.x,self.y),self.size)
        pygame.draw.circle(win,self.colour2,(self.x,self.y),self.size*0.8)
        pygame.draw.circle(win,self.colour,(self.x,self.y),self.size*0.6)
        pygame.draw.circle(win,self.colour2,(self.x,self.y),self.size*0.4)

    def collision(self,x,y):                                    #x and y are coordinates of mouse click
        dist=math.sqrt((self.x-x)**2 + (self.y-y)**2)           #Distance between mouse click and target 
        return dist<=self.size
def draw(win,targets):                                          #Drawing all targets and bg
    win.fill(bg_colour)                                         
    for target in targets:
        target.draw(win)                                        


def format_time(secs):                                          #Formatting time for display
    milli = math.floor(int(secs * 1000 % 1000) / 100)
    seconds = int(round(secs % 60, 1))
    minutes = int(secs // 60)

    return f"{minutes:02d}:{seconds:02d}.{milli}"

def bar(win, elapsed_time,targets_pressed, missed):                 #Drawing top bar with all labels
    pygame.draw.rect(win,"grey",(0,0, width, bar_height))
    speed = round(targets_pressed / elapsed_time, 1)
    time_label=label_font.render(f"Time:{format_time(elapsed_time)}",1,"black")
    speed_label = label_font.render(f"Speed: {speed} t/s", 1, "black")
    hits_label = label_font.render(f"Hits: {targets_pressed}", 1, "black")
    lives_label = label_font.render(f"Lives: {lives - missed}", 1, "black")    
    win.blit(time_label,(5,5))
    win.blit(speed_label, (200, 5))
    win.blit(hits_label, (450, 5))
    win.blit(lives_label, (650, 5))

def get_middle(surface):
    return width / 2 - surface.get_width()/2

def end_shit(win, elapsed_time, targets_pressed, clicks):           #End screen 
    win.fill(bg_colour)
    time_label = label_font.render(
        f"Time: {format_time(elapsed_time)}", 1, "white")

    speed = round(targets_pressed / elapsed_time, 1)
    speed_label = label_font.render(f"Speed: {speed} t/s", 1, "white")

    hits_label = label_font.render(f"Hits: {targets_pressed}", 1, "white")

    accuracy = round((targets_pressed / clicks)* 100, 1)

    accuracy_label = label_font.render(f"Accuracy: {accuracy}%", 1, "white")

    win.blit(time_label, (get_middle(time_label), 100))
    win.blit(speed_label, (get_middle(speed_label), 200))
    win.blit(hits_label, (get_middle(hits_label), 300))
    win.blit(accuracy_label, (get_middle(accuracy_label), 400))

    pygame.display.update()

    run = True
    while run:                                              #Loop till user exits
        for event in pygame.event.get():
            if event.type == pygame.QUIT or event.type == pygame.KEYDOWN:               
                quit()

def main():
    run=True
    targets=[]
    clock=pygame.time.Clock()

    targets_pressed=0
    clicks=0
    missed=0
    start_time=time.time()
    pygame.time.set_timer(Target_event, Target_increase_time)

    while run:
        clock.tick(60)
        click=False
        elapsed_time=time.time()-start_time
        mouse_pos=pygame.mouse.get_pos()    

        for event in pygame.event.get():
            if event.type==pygame.QUIT:             #Exit
                run=False
                break
            if event.type==Target_event:
                x=random.randint(Target_Padding, width-Target_Padding)
                y=random.randint(Target_Padding+bar_height, height-Target_Padding)
                target=Target(x,y)                  #Create a new target
                targets.append(target)              #Append to list of targets
            if event.type==pygame.MOUSEBUTTONDOWN:
                click=True
                clicks+=1
        for target in targets:
            target.update()      
            if target.size<=0:                                          #Removing missed targets
                targets.remove(target)
                missed+=1     
            if click and target.collision(*mouse_pos):                  #Target clicked
                targets.remove(target)
                targets_pressed+=1
        if missed>=lives:                                               #Lives are over
            end_shit(win,elapsed_time, targets_pressed, clicks)
        draw(win,targets)
        bar(win, elapsed_time, targets_pressed, missed)
        pygame.display.update()
    pygame.quit()

if __name__=="__main__":
    main()
